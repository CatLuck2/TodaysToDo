//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 6 view controllers.
  struct segue {
    /// This struct is generated for `CustomAlertViewController`, and contains static references to 1 segues.
    struct customAlertViewController {
      /// Segue identifier `unwindToSettingsVCFromCustomAlert`.
      static let unwindToSettingsVCFromCustomAlert: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CustomAlertViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToSettingsVCFromCustomAlert")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `unwindToSettingsVCFromCustomAlert`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToSettingsVCFromCustomAlert(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CustomAlertViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.customAlertViewController.unwindToSettingsVCFromCustomAlert, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `HelpViewController`, and contains static references to 1 segues.
    struct helpViewController {
      /// Segue identifier `segueToHelpDetail`.
      static let segueToHelpDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HelpViewController, HelpDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToHelpDetail")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `segueToHelpDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToHelpDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HelpViewController, HelpDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.helpViewController.segueToHelpDetail, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MainViewController`, and contains static references to 1 segues.
    struct mainViewController {
      /// Segue identifier `toToDoList`.
      static let toToDoList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toToDoList")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toToDoList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toToDoList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.toToDoList, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `PopupViewController`, and contains static references to 1 segues.
    struct popupViewController {
      /// Segue identifier `unwindSegueFromPopupToMain`.
      static let unwindSegueFromPopupToMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PopupViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindSegueFromPopupToMain")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `unwindSegueFromPopupToMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindSegueFromPopupToMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PopupViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.popupViewController.unwindSegueFromPopupToMain, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `SettingsViewController`, and contains static references to 2 segues.
    struct settingsViewController {
      /// Segue identifier `settingContact`.
      static let settingContact: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "settingContact")
      /// Segue identifier `settingHelp`.
      static let settingHelp: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "settingHelp")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `settingContact`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func settingContact(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsViewController.settingContact, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `settingHelp`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func settingHelp(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsViewController.settingHelp, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ToDoListViewController`, and contains static references to 1 segues.
    struct toDoListViewController {
      /// Segue identifier `unwindToMainVCFromToDoListVC`.
      static let unwindToMainVCFromToDoListVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ToDoListViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToMainVCFromToDoListVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `unwindToMainVCFromToDoListVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToMainVCFromToDoListVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ToDoListViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.toDoListViewController.unwindToMainVCFromToDoListVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `Analytics`.
    static let analytics = _R.storyboard.analytics()
    /// Storyboard `CustomAlert`.
    static let customAlert = _R.storyboard.customAlert()
    /// Storyboard `CustomTabBarController`.
    static let customTabBarController = _R.storyboard.customTabBarController()
    /// Storyboard `HelpDetail`.
    static let helpDetail = _R.storyboard.helpDetail()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Popup`.
    static let popup = _R.storyboard.popup()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Analytics", bundle: ...)`
    static func analytics(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.analytics)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CustomAlert", bundle: ...)`
    static func customAlert(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customAlert)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CustomTabBarController", bundle: ...)`
    static func customTabBarController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customTabBarController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HelpDetail", bundle: ...)`
    static func helpDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.helpDetail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Popup", bundle: ...)`
    static func popup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.popup)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `アラート.mp4`.
    static let アラートMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "アラート", pathExtension: "mp4")
    /// Resource file `タスク作成.mp4`.
    static let タスク作成Mp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "タスク作成", pathExtension: "mp4")
    /// Resource file `タスク編集と削除.mp4`.
    static let タスク編集と削除Mp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "タスク編集と削除", pathExtension: "mp4")

    /// `bundle.url(forResource: "アラート", withExtension: "mp4")`
    static func アラートMp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.アラートMp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "タスク作成", withExtension: "mp4")`
    static func タスク作成Mp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.タスク作成Mp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "タスク編集と削除", withExtension: "mp4")`
    static func タスク編集と削除Mp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.タスク編集と削除Mp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `タスク終了画像`.
    static let タスク終了画像 = Rswift.ImageResource(bundle: R.hostingBundle, name: "タスク終了画像")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "タスク終了画像", bundle: ..., traitCollection: ...)`
    static func タスク終了画像(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.タスク終了画像, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "CustomTabBarController"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `NewToDoItemCell`.
    static let newToDoItemCell = _R.nib._NewToDoItemCell()
    /// Nib `TableViewController`.
    static let tableViewController = _R.nib._TableViewController()
    /// Nib `ToDoItemCell`.
    static let toDoItemCell = _R.nib._ToDoItemCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NewToDoItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newToDoItemCell) instead")
    static func newToDoItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newToDoItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TableViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tableViewController) instead")
    static func tableViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tableViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ToDoItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toDoItemCell) instead")
    static func toDoItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toDoItemCell)
    }
    #endif

    static func newToDoItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewToDoItemCell? {
      return R.nib.newToDoItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewToDoItemCell
    }

    static func tableViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tableViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func toDoItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToDoItemCell? {
      return R.nib.toDoItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToDoItemCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `cellForHelp`.
    static let cellForHelp: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cellForHelp")
    /// Reuse identifier `cellForSettings`.
    static let cellForSettings: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cellForSettings")
    /// Reuse identifier `newAddItemCell`.
    static let newAddItemCell: Rswift.ReuseIdentifier<NewToDoItemCell> = Rswift.ReuseIdentifier(identifier: "newAddItemCell")
    /// Reuse identifier `todoItemCell`.
    static let todoItemCell: Rswift.ReuseIdentifier<ToDoItemCell> = Rswift.ReuseIdentifier(identifier: "todoItemCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _NewToDoItemCell.validate()
    }

    struct _NewToDoItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NewToDoItemCell

      let bundle = R.hostingBundle
      let identifier = "newAddItemCell"
      let name = "NewToDoItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewToDoItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewToDoItemCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in nib 'NewToDoItemCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TableViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TableViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ToDoItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ToDoItemCell

      let bundle = R.hostingBundle
      let identifier = "todoItemCell"
      let name = "ToDoItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToDoItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToDoItemCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try analytics.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try customAlert.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try customTabBarController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try helpDetail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try popup.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct analytics: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AnalyticsViewController

      let bundle = R.hostingBundle
      let name = "Analytics"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct customAlert: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CustomAlertViewController

      let bundle = R.hostingBundle
      let name = "CustomAlert"
      let segueToCustomAlert = StoryboardViewControllerResource<CustomAlertViewController>(identifier: "segueToCustomAlert")

      func segueToCustomAlert(_: Void = ()) -> CustomAlertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: segueToCustomAlert)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.customAlert().segueToCustomAlert() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'segueToCustomAlert' could not be loaded from storyboard 'CustomAlert' as 'CustomAlertViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct customTabBarController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CustomTabBarController

      let bundle = R.hostingBundle
      let name = "CustomTabBarController"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct helpDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HelpDetailViewController

      let bundle = R.hostingBundle
      let helpDetail = StoryboardViewControllerResource<HelpDetailViewController>(identifier: "helpDetail")
      let name = "HelpDetail"

      func helpDetail(_: Void = ()) -> HelpDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpDetail)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.helpDetail().helpDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpDetail' could not be loaded from storyboard 'HelpDetail' as 'HelpDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct popup: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PopupViewController

      let bundle = R.hostingBundle
      let name = "Popup"
      let segueToPopup = StoryboardViewControllerResource<PopupViewController>(identifier: "segueToPopup")

      func segueToPopup(_: Void = ()) -> PopupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: segueToPopup)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.popup().segueToPopup() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'segueToPopup' could not be loaded from storyboard 'Popup' as 'PopupViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SettingsViewController

      let bundle = R.hostingBundle
      let name = "Settings"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
